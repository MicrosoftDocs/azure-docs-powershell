### YamlMime:FAQ
metadata:
  title: Frequently Asked Questions (FAQ)
  description: Frequently Asked Questions about Azure PowerShell.
  ms.devlang: powershell
  ms.topic: faq
  ms.custom: devx-track-azurepowershell
  ms.service: azure-powershell

title: Frequently asked questions about Azure PowerShell
summary: |

sections:
  - name: Ignored
    questions:
      - question: |
          What is Azure PowerShell?
        answer: |
          Azure PowerShell is a set of cmdlets that allows you to manage Azure resources directly with
          PowerShell. In December 2018, the Az PowerShell module became generally available. It's now the
          recommended PowerShell module for interacting with Azure. To learn more about the Az PowerShell
          module, see
          [Introducing the Az PowerShell module](/powershell/azure/new-azureps-module-az).

      - question: |
          How do I disable breaking change warning messages in Azure PowerShell?
        answer: |
          To suppress the breaking change warning messages in Azure PowerShell, you'll need to set the
          environment variable `SuppressAzurePowerShellBreakingChangeWarnings` to `true`.

          ```azurepowershell
          Set-Item -Path Env:\SuppressAzurePowerShellBreakingChangeWarnings -Value $true
          ```

          This environment variable must be set before importing the **Az** or **Az.Accounts** PowerShell module for it to take effect in the current PowerShell session.

          For additional methods to disable breaking change warning messages in Azure PowerShell, see [Configure Azure PowerShell global settings](/powershell/azure/configure-global-settings#breaking-change-warning-messages).

      - question: |
          How do I disable the AzureRM retirement warning message in Azure PowerShell?
        answer: |
          To suppress the AzureRM retirement warning message in Azure PowerShell, you'll need to set the
          environment variable `SuppressAzureRmModulesRetiringWarning` to `true`.

          ```azurepowershell-interactive
          Set-Item -Path Env:\SuppressAzureRmModulesRetiringWarning -Value $true
          ```

          One disadvantage of the previous example is you'll need to run the command for each new PowerShell
          session unless you add it to your PowerShell profile.

          To set the environment variable permanently, you can also use the following example.

          ```azurepowershell-interactive
          [System.Environment]::SetEnvironmentVariable('SuppressAzureRmModulesRetiringWarning', 'true', [System.EnvironmentVariableTarget]::User)
          ```

      - question: |
          How do I determine the max HTTP retry times in Azure PowerShell?
        answer: |
          For general HTTP response (except response status code is 429), Azure PowerShell uses the value defined in the `AZURE_PS_HTTP_MAX_RETRIES` environment variable. Its minimum value is 0. If not specified, Azure PowerShell uses the SDK default value.

          ```azurepowershell-interactive
          [System.Environment]::SetEnvironmentVariable('AZURE_PS_HTTP_MAX_RETRIES ', 3, [System.EnvironmentVariableTarget]::User)
          ```

          If the HTTP response status code is 429, Azure PowerShell uses the value defined in the `AZURE_PS_HTTP_MAX_RETRIES_FOR_429` environment variable. Its minimum value is 1. The total retry times of status code 429 is (`AZURE_PS_HTTP_MAX_RETRIES` + 1) * `AZURE_PS_HTTP_MAX_RETRIES_FOR_429` - 1. If not specified, Azure PowerShell uses the SDK default value.

          ```azurepowershell-interactive
          [System.Environment]::SetEnvironmentVariable('AZURE_PS_HTTP_MAX_RETRIES_FOR_429 ', 3, [System.EnvironmentVariableTarget]::User)
          ```

      - question: |
          How can I convert a SecureString to plain text in PowerShell?
        answer: |
          You can use the following code snippet to convert a SecureString (`$secureString`) into plain text (`$plainText`):

          ```powershell
          $ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString)
          try {
              $plaintext = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr)
              # Perform operations with the contents of $plaintext in this section.
          } finally {
              # The following line ensures that sensitive data is not left in memory.
              $plainText = [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ssPtr)
          }
          ```

          **Note:** Handle plain text carefully, as it is less secure than a SecureString.

      - question: |
          How to mitigate the error "SharedTokenCacheCredential authentication unavailable"?
        answer: |
          If you are getting this error when using an Azure PowerShell cmdlet that creates or
          makes change to Azure resources, it is likely that you are blocked by the Entra ID
          Conditional Access policy.

          The complete error message is as follows:

          ```
          SharedTokenCacheCredential authentication unavailable. Token acquisition failed for user
          someone@example.com. Ensure that you have authenticated with a developer tool that supports
          Azure single sign on.
          ```

          To resolve this issue, please update to version 14.X.Y or later of the Azure PowerShell module,
          or equivalently, version 5.X.Y of the Az.Accounts module.
          With these versions, the Azure PowerShell cmdlets will be able to display detailed error messages
          regarding which policy is blocking the authentication, and how to resolve the issue.

          For example, if the admin has configured the policy to require multi-factor authentication (MFA),
          you will see an error message similar to the following:

          ```powershell
          {Placeholder for error message}
          ```
          
          Follow the instructions in the error message to sign in through multi-factor authentication (MFA).
